import regex as re
import localization.locale

from random import randint
from pathlib import Path
from string import Template

from model.survey import *
from model.question import *
from utils.database import session
from utils.logger import logger
from utils.tools import fisher_yates_shuffle, load_js


class SurveyGenerator:

    supported_export_types = ["html", "json"]

    def generate_all(self, n_surveys=None):
        """
        Generates surveys and saves them to the database.

        Surveys are generated by image group - each survey contain all questions generated for one image group.

        :param n_surveys: Maximum number of survey that should be generated. If the requested number is larger then
            a possible number of surveys that can be generated, the method generate as many surveys as it can.
        :return:
        """
        print("generator 2")

        current_image_group = Images.get_min_image_group()
        max_image_group = Images.get_max_image_group()

        # iterate while there are more question groups to include in the survey
        while current_image_group <= max_image_group:

            questions = Questions.get_by_image_group(gid=current_image_group, unassigned=True)
            # print(f">>> Dobavio pitanja za grupu {current_image_group}.")
            if questions is None or len(questions) == 0:
                logger.info(f"All questions assigned with group id {current_image_group} are already assigned to an "
                            f"existing survey. Skipping.")
                current_image_group += 1
                continue

            # save a survey to database so that it is assigned valid id
            current_image_group += 1
            survey = RegularSurvey(auth_page=False)
            session.add(survey)
            session.commit()

            questions = fisher_yates_shuffle(questions)

            for i in range(0, len(questions)):
                question = questions[i]
                survey.questions.append(question)
                logger.info(f"Added question {question.id} to survey {survey.id}.")

            # generate survey json and update the survey in the database
            survey.generate()

            # replace survey id placeholders in questions associated to survey with the survey id
            survey.json = survey.json.replace("^_^", str(survey.id))

            session.commit()

            # stop survey generation if required number of surveys is reached
            if n_surveys is not None:
                n_surveys -= 1
                if n_surveys == 0:
                    break

    @staticmethod
    def export_surveys(where, export_type="json", survey_type="regular"):
        """

        :param where:
        :param export_type:
        :param survey_type:
        :return:
        """
        # check if directory to export to is ok
        if where is not None:
            if not Path(where).is_dir():
                logger.error(f"Cannot export surveys to {where} because it is not a directory.")
                raise NotADirectoryError(f"Cannot export surveys to {where} because it is not a directory.")
            else:
                logger.info(f"Survey export is enabled. You can find exported surveys in directory '{where}'.")

        # check if export type is valid
        export_type = export_type.lower()
        if export_type not in SurveyGenerator.supported_export_types:
            logger.error(f"Cannot export survey to '{export_type}'. Supported types are "
                         f"{SurveyGenerator.supported_export_types}")
            raise ValueError(f"Cannot export survey to '{export_type}'. Supported types are "
                             f"{SurveyGenerator.supported_export_types}")

        # export content
        surveys = session.query(Survey).where(Survey.type == survey_type).all()
        if len(surveys) == 0:
            logger.warning(f"There are no surveys in a database to be exported. Skipping.")
            exit(1)

        image_viewer_js = load_js()

        for survey in surveys:
            if type(survey) == RegularSurvey:
                prefix = "regular"
            else:
                prefix = "control"
            if export_type == "json":
                survey_filename = f"{prefix}-survey-{survey.id}.t2.json"
                target_path = Path(where) / survey_filename
                with open(target_path, "w", encoding="utf8") as fout:
                    fout.write(survey.json)
                    logger.info(f"Survey {survey_filename} saved!")
            else:  # html
                # $head - html head section
                # $body - html body section
                html = Template("""
<html>
                    $head
                    $body
</html>
                """).substitute({
                    "head": SurveyGenerator._generate_html_head_template(),
                    "body": SurveyGenerator._genenerate_html_body_template().substitute({
                        "image_viewer_js": image_viewer_js,
                        "survey_json": survey.json,
                        "jqueryselector": "$"
                    })
                })
                survey_filename = f"{prefix}-survey-{survey.id}.t2.html"
                target_path = Path(where) / survey_filename
                with open(target_path, "w", encoding="utf8") as fout:
                    fout.write(html)
                    logger.info(f"Survey {survey_filename} saved!")

    @staticmethod
    def _generate_html_head_template():
        return """ 
  <head> 
    <meta charset="UTF-8">

    <!-- favicon settings --> 
    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="manifest" href="site.webmanifest">
    <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    
    <!-- jquery and survey.jquery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <link href="https://unpkg.com/survey-jquery@1.8.56/modern.css" type="text/css" rel="stylesheet" />
    <script src="https://unpkg.com/survey-jquery@1.8.56/survey.jquery.min.js"></script>
    
    <script>
      let DoctorData = {
         //PHP-DOCTOR-DATA-REPLACE
      };
      let SurveyData = {
         //PHP-SURVEY-DATA-REPLACE
      };
      function initViewer(
        querySelector, 
        imageId, 
        resetWLButtonText, 
        resetZoomButtonText, 
        resetPanButtonText, 
        resetRotationButtonText, 
        resetAllButtonText, 
        helpButtonText, 
        closeHelpButtonText,
        helpDialogTitle,
        helpDialogWLMessage,
        helpDialogPanMessage,
        helpDialogZoomMessage,
        helpDialogRotateMessage,
        helpDialogRestoreMessage
      ) {
          const viewer = new MedicalImageViewer({
            containerSelector: '#' + querySelector, 
            resetWLButtonText: resetWLButtonText, 
            resetZoomButtonText: resetZoomButtonText,
            resetPanButtonText: resetPanButtonText, 
            resetRotationButtonText: resetRotationButtonText, 
            resetAllButtonText: resetAllButtonText, 
            helpButtonText: helpButtonText, 
            closeHelpButtonText: closeHelpButtonText,
            helpDialogTitle: helpDialogTitle,
            helpDialogWLMessage: helpDialogWLMessage,
            helpDialogPanMessage: helpDialogPanMessage,
            helpDialogZoomMessage: helpDialogZoomMessage,
            helpDialogRotateMessage: helpDialogRotateMessage,
            helpDialogRestoreMessage: helpDialogRestoreMessage
          });
          viewer.loadImage(imageId)
      };
      
      function cornerstoneTransformBase64(base64String) {
        // A typical data URI prefix looks like "data:image/png;base64," 
        // (or "data:image/jpeg;base64," etc.)
        const prefixRegex = /^data:image\/[a-zA-Z0-9+.-]+;base64,/;

        // Remove the standard data URI prefix if it exists
        const stripped = base64String.replace(prefixRegex, "");

        // Prepend "base://" string required for cornerstone base64 image loader
        const cornerstoneTansformedBase64 = "base64://" + stripped;

        return cornerstoneTansformedBase64;
      }
     </script>
  </head>
"""

    @staticmethod
    def _genenerate_html_body_template():
        # $survey_json - survey json string saved in a database
        # $jqueryselector - is to be substitutes with "$" as a workaround
        locale = localization.locale.get_locale_data()
        return Template(f"""
  <body>
    <!-- replace this with built-in js code -->
    <script>$image_viewer_js</script>
    
    <div id="surveyContainer"></div>
    
    <!-- Init survey -->
    <script>
      Survey
        .StylesManager
        .applyTheme("modern");

      Survey
        .Serializer
        .addProperty("imagepicker", "imageTag:text")
        
      Survey
        .Serializer
        .addProperty("survey", "surveyID:number")
        
      var surveyJSON = $survey_json
      function downloadSurveyData(data, filename = 'survey-results.json') {{
            let jsonData = JSON.stringify(data, null, 2); // Pretty print JSON data
            let blob = new Blob([jsonData], {{ type: "application/json" }});
              
            // Create a link element to trigger the download
            let link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
              
            // Programmatically click the link to trigger the download
            document.body.appendChild(link);
            link.click();
              
            // Clean up
            document.body.removeChild(link);
      }}
        
      // Replace the original sendDataToServer function with this
      function sendDataToDisk(sender) {{
          // Serialize the survey data
          let surveyData = sender.data;
          let formattedData = {{
              "ResultCount": 1,
              "HappenedAt": Date.now(),
              "Data": [
                  surveyData
              ]
          }};
  
          surveyFilename = window.location.pathname
          surveyFilename = surveyFilename.substring(surveyFilename.lastIndexOf('/') + 1)
          let responseFilename = 'responses-' + surveyFilename
  
          // Trigger file download with the survey data
          downloadSurveyData(formattedData, responseFilename);
      }}
      var survey = new Survey.Model(surveyJSON);
        
      survey
        .onAfterRenderQuestion
        .add(function (sender, options) {{
            // options.question - a page object for which the event is fired, typically the current/active page
            // options.htmlElement - an HTML element bound to the page object
            console.debug("Opaljen onAfterRenderQuestion dogadjaj");
            if (!options.question.imageTag) return;
            if (options.question.imageTag === "original") {{
                options.htmlElement.parentElement.attributes.style.value = "flex: 1; width: 100%";
            }} else if (options.question.imageTag === "segmaps") {{
                options.htmlElement.parentElement.attributes.style.value = "flex: 2; width: 100%";
            }} else {{
                console.debug("Nije ni originalni ni segmaps imagepicker")
            }}
            
            let container = document.getElementsByClassName("sv-row")
            if (container.length !== 1) {{
                return;
            }}
            container = container[0];
            let images = document.getElementsByTagName("img");
            let minimal_width = 300;
            for (image in images) {{
              if (images[image].style) {{
                let old_width = images[image].width;
                images[image].style.width = minimal_width;
                images[image].width = minimal_width;
                images[image].style.height = Math.floor(images[image].height*minimal_width/old_width);
                images[image].height = Math.floor(images[image].height*minimal_width/old_width);
              }}
            }}
            
            let container_original = container.children[0];
            let container_original_picture = container_original.children[0].children[1].children[0];
            let container_segment = container.children[1];
            let container_segment_pictures = container_segment.children[0].children[1].children[0];

            let new_width = -1;
            if (Math.floor(container.offsetWidth) < 675) {{
              new_width = Math.floor(container_original_picture.offsetWidth-8); 
              if (new_width < 500)
                new_width = 500;
            }} else if (Math.floor(container.offsetWidth) < 1000) {{
              new_width = Math.floor(container_segment_pictures.offsetWidth- 32);
              new_width = new_width + Math.floor(container_original_picture.offsetWidth-8);
              new_width = Math.floor(new_width/2);
            }} else {{
              new_width = Math.floor(container_segment_pictures.offsetWidth-Math.ceil(container_segment.offsetWidth*0.05) - 32);
              new_width = new_width + Math.floor(container_original_picture.offsetWidth-8);
              new_width = Math.floor(new_width/3); 
            }}
            if (new_width < minimal_width) 
              new_width = minimal_width;
            for (image in images) {{
                if (images[image].style) {{
                  let old_width = images[image].width;
                  images[image].style.width = new_width;
                  images[image].width = new_width;
                  images[image].style.height = Math.floor(images[image].height*new_width/old_width);
                  images[image].height = Math.floor(images[image].height*new_width/old_width);
                }}
            }}
            
            // add vspace above and bellow the question description
            description = document.getElementsByClassName("sv-description")[0].children[0]
            description.style = "position: absolute; margin-top: 10px; margin-bottom: 10px;"
            
            // replace images inisde the image picker with medical image viewer
            images = options.htmlElement.querySelectorAll("img");
            images.forEach((img) => {{

              let imgAlt = img.alt;

              // Find the matching choice from the question definition
              const choice = options.question.choices.find(c => c.value === imgAlt);
              if (!choice) console.error("There are no choices for this image for some reason... Exiting.");

              // Retrieve the Base64 code from the choice object
              const base64Data = cornerstoneTransformBase64(choice.imageLink);

              // Replace the default image with a custom viewer
              let container = document.createElement("div");
              container.id = "viewer-" + imgAlt; 
              container.style.width = 564;
              container.style.height = 564;
              container.className = "sv-imagepicker__image";
              container.style.pointerEvents = "auto";
              img.parentElement.replaceChild(container, img);

              // Initialize image viewer
              let resetWLButtonText = "{locale["iview_reset_wl_button_text"]}";
              let resetZoomButtonText = "{locale["iview_reset_zoom_button_text"]}";
              let resetPanButtonText = "{locale["iview_reset_pan_button_text"]}";
              let resetRotationButtonText = "{locale["iview_reset_rotation_button_text"]}";
              let resetAllButtonText = "{locale["iview_reset_all_button_text"]}";
              let helpButtonText = "{locale["iview_help_button_text"]}";
              let helpDialogTitle = "{locale["iview_help_dialog_title"]}";
              let helpDialogWLMessage = "{locale["iview_help_dialog_wl_message"]}";
              let helpDialogPanMessage = "{locale["iview_help_dialog_pan_message"]}";
              let helpDialogZoomMessage = "{locale["iview_help_dialog_zoom_message"]}";
              let helpDialogRotateMessage = "{locale["iview_help_dialog_rotate_message"]}";
              let helpDialogRestoreMessage = "{locale["iview_help_dialog_restore_message"]}";
              let closeHelpButtonText = "{locale["iview_close_help_button_text"]}";
              
              initViewer(
                    container.id,
                    base64Data, 
                    resetWLButtonText, 
                    resetZoomButtonText, 
                    resetPanButtonText, 
                    resetRotationButtonText, 
                    resetAllButtonText,
                    helpButtonText,
                    closeHelpButtonText,
                    helpDialogTitle,
                    helpDialogWLMessage,
                    helpDialogPanMessage,
                    helpDialogZoomMessage,
                    helpDialogRotateMessage,
                    helpDialogRestoreMessage
                );
            }});
        }});
        
      survey.locale = "{locale["localization"]}"
      
      $jqueryselector("#surveyContainer").Survey({{
          model: survey,
          onComplete: sendDataToDisk
      }});
    </script>
  </body>
""")


